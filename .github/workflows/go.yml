name: Go

on:
  push:
    branches: [ main ]
    tags: '*'
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.16
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Install dependencies
      run: go mod download

    - name: Build
      run: go build -v .

    - name: Run Unit tests
      run: go test -race -covermode atomic -coverprofile=profile.cov ./...

  build:
    name: Build docker
    needs: test
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=davidebianchi/echo-service
          VERSION=latest
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            VERSION=$(echo ${VERSION} | sed s/^v//)
          elif [[ $GITHUB_REF == refs/heads/main ]]; then
            VERSION=latest
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=image::${DOCKER_IMAGE}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          pull: true
          push: true
          cache-from: type=registry,ref=${{ steps.prep.outputs.image }}:latest
          cache-to: type=inline
          tags: ${{ steps.prep.outputs.tags }}
          platforms: linux/amd64,linux/arm64
